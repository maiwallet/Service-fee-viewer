// xrplFeeClassifier.js

export function classifyFeeType(tx) {
  const type = tx.TransactionType;
  const feeDrops = parseInt(tx.Fee);
  const feeXRP = feeDrops / 1_000_000;
  const result = {
    type: "Unknown",
    fee: feeXRP,
    note: "Unable to classify fee type.",
  };

  // Utility: check if value is zero
  const isZeroValue = (value) => {
    if (!value) return false;
    if (typeof value === "string") return value === "0" || value === "0.0";
    if (typeof value === "object") return value.value === "0" || value.value === "0.0";
    return false;
  };

  // NFT transactions
  if (type.startsWith("NFToken")) {
    if (isZeroValue(tx.Amount)) {
      return {
        type: `${type} (Zero Value NFT)`,
        fee: 0,
        note: "No service fee for 0-value NFT transactions."
      };
    }
    return {
      type,
      fee: 0.09,
      note: "Fixed fee for NFT transactions (non-zero value)."
    };
  }

  // Pathfinding Payment
  if (type === "Payment" && (tx.SendMax || tx.DeliverMin)) {
    return {
      type: "Pathfinding Payment",
      fee: 0.15,
      note: "Pathfinding payments have increased computational complexity."
    };
  }

  // Trading Transactions (AMM or DEX)
  if (["AMMDeposit", "AMMWithdraw"].includes(type)) {
    return {
      type,
      fee: 0.09,
      percentage: 0.008,
      minFee: 0.09,
      note: "AMM deposits/withdrawals are considered trading actions."
    };
  }

  if (type === "OfferCreate") {
    const paysXRP = typeof tx.TakerPays === "string";
    const getsXRP = typeof tx.TakerGets === "string";
    if (paysXRP && getsXRP) {
      return {
        type: "OfferCreate (XRP ↔ XRP)",
        fee: 0.09,
        note: "Likely an XRP limit order."
      };
    } else if (paysXRP || getsXRP) {
      return {
        type: "OfferCreate (XRP ↔ Token)",
        fee: 0.09,
        percentage: 0.008,
        minFee: 0.09,
        note: "Trading XRP ↔ token. Subject to trading fee."
      };
    } else {
      return {
        type: "OfferCreate (Token ↔ Token)",
        fee: 0.09,
        percentage: 0.008,
        minFee: 0.09,
        note: "Token-to-token DEX trade."
      };
    }
  }

  // AccountSet or TrustSet
  if (["AccountSet", "TrustSet"].includes(type)) {
    return {
      type,
      fee: 0.09,
      note: "Fixed fee for account or trustline modifications."
    };
  }

  // High-Value Payment
  if (type === "Payment" && typeof tx.Amount === "string") {
    const amountXRP = parseInt(tx.Amount) / 1_000_000;
    if (amountXRP > 100000) {
      return {
        type: "High-Value Payment",
        fee: amountXRP * 0.0007,
        percentage: 0.0007,
        note: ">100k XRP — 0.07% service fee."
      };
    } else if (amountXRP > 50000) {
      return {
        type: "High-Value Payment",
        fee: amountXRP * 0.001,
        percentage: 0.001,
        note: ">50k XRP — 0.1% service fee."
      };
    }
  }

  // Default fallback
  return result;
}
